import java.util.*;

class Process implements Comparable<Process> {
    int pid, arrivalTime, burstTime, completionTime, turnaroundTime, waitingTime;

    public Process(int pid, int arrivalTime, int burstTime) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
    }

    @Override
    public int compareTo(Process other) {
        return this.arrivalTime - other.arrivalTime;
    }
}

public class Scheduler {

    // FCFS Scheduling
    public static void FCFS() {
        Scanner in = new Scanner(System.in);
        System.out.println("Enter the number of Processes:");
        int numberOfProcesses = in.nextInt();
        Process[] processes = new Process[numberOfProcesses];
        
        for (int i = 0; i < numberOfProcesses; i++) {
            System.out.println("Enter Process " + (i + 1) + " Arrival time: ");
            int at = in.nextInt();
            System.out.println("Enter Process " + (i + 1) + " Burst time: ");
            int bt = in.nextInt();
            processes[i] = new Process(i + 1, at, bt);
        }

        Arrays.sort(processes);
        double totalWT = 0, totalTAT = 0;
        processes[0].completionTime = processes[0].arrivalTime + processes[0].burstTime;

        for (int i = 1; i < numberOfProcesses; i++) {
            if (processes[i - 1].completionTime < processes[i].arrivalTime) {
                processes[i].completionTime = processes[i].arrivalTime + processes[i].burstTime;
            } else {
                processes[i].completionTime = processes[i - 1].completionTime + processes[i].burstTime;
            }
        }

        for (int i = 0; i < numberOfProcesses; i++) {
            processes[i].turnaroundTime = processes[i].completionTime - processes[i].arrivalTime;
            processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
            totalWT += processes[i].waitingTime;
            totalTAT += processes[i].turnaroundTime;
        }

        System.out.println("Process\tAT\tBT\tCT\tTAT\tWT");
        for (Process p : processes) {
            System.out.printf("P%d\t%d\t%d\t%d\t%d\t%d\n", p.pid, p.arrivalTime, p.burstTime, p.completionTime, p.turnaroundTime, p.waitingTime);
        }
        System.out.printf("\nAverage Turnaround Time: %.2f", totalTAT / numberOfProcesses);
        System.out.printf("\nAverage Waiting Time: %.2f", totalWT / numberOfProcesses);
        System.out.println("\n\nGantt Chart:");
        for (Process p : processes) {
            System.out.print("| P" + p.pid + " ");
        }
        System.out.println("|");
        System.out.print(processes[0].arrivalTime);
        for (Process p : processes) {
            System.out.print(" " + p.completionTime);
        }
    }

    // Round Robin Scheduling
    public static void RoundRobin() {
        Scanner s = new Scanner(System.in);
        int[] wtime = new int[10], btime = new int[10], rtime = new int[10], ctime = new int[10], atime = new int[10];
        int num, quantum;
        System.out.print("Enter number of processes (MAX 10): ");
        num = s.nextInt();

        System.out.println("Enter burst time and arrival time for each process:");
        for (int i = 0; i < num; i++) {
            System.out.print("P[" + (i + 1) + "] Burst Time: ");
            btime[i] = s.nextInt();
            System.out.print("P[" + (i + 1) + "] Arrival Time: ");
            atime[i] = s.nextInt();
            rtime[i] = btime[i];  // Initialize remaining time
            wtime[i] = 0;          // Initialize waiting time
            ctime[i] = 0;          // Initialize completion time
        }

        System.out.print("\nEnter quantum: ");
        quantum = s.nextInt();

        // Sort processes by arrival time
        List<Integer> order = new ArrayList<>();
        for (int i = 0; i < num; i++) {
            order.add(i);
        }
        order.sort(Comparator.comparingInt(i -> atime[i])); // Sort by arrival time

        int rp = num;  // remaining processes
        int time = 0;   // current time
        int i = 0;      // process index
        List<String> ganttChart = new ArrayList<>();
        List<Integer> ganttTime = new ArrayList<>();
        ganttTime.add(time);

        // Round Robin Scheduling
        while (rp != 0) {
            boolean executed = false;
            // Go through each process in the order of their arrival times
            for (int j : order) {
                if (rtime[j] > 0 && atime[j] <= time) {
                    // Execute the process for up to the quantum time
                    executed = true;
                    if (rtime[j] > quantum) {
                        time += quantum;
                        rtime[j] -= quantum;
                    } else {
                        time += rtime[j];
                        rtime[j] = 0;
                        rp--;
                        ctime[j] = time;  // Set completion time
                    }
                    ganttChart.add("P[" + (j + 1) + "]");
                    ganttTime.add(time);
                }
            }
            // If no process executed in this loop, increment time
            if (!executed) {
                time++;
            }
        }

        // Calculate Turnaround Time (TAT) and Waiting Time (WT)
        int tat[] = new int[num];
        for (i = 0; i < num; i++) {
            tat[i] = ctime[i] - atime[i]; // TAT = CT - AT
            wtime[i] = tat[i] - btime[i]; // WT = TAT - BT
        }

        // Display the result in a table
        System.out.println("\nProcess\t\tBT\t\tAT\t\tCT\t\tTAT\t\tWT");
        for (i = 0; i < num; i++) {
            System.out.println("P[" + (i + 1) + "]\t\t" + btime[i] + "\t\t" + atime[i] + "\t\t" +
                    ctime[i] + "\t\t" + tat[i] + "\t\t" + wtime[i]);
        }

        // Display Gantt Chart
        System.out.println("\nGantt Chart:");
        for (String process : ganttChart) {
            System.out.print(process + " ");
        }
        System.out.println();
        for (Integer t : ganttTime) {
            System.out.print(t + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nChoose Scheduling Algorithm:");
            System.out.println("1. First Come First Serve (FCFS)");
            System.out.println("2. Round Robin");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    FCFS();
                    break;
                case 2:
                    RoundRobin();
                    break;
                case 3:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        } while (choice != 3);
    }
}
