import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class PageReplacement {

    // FIFO Algorithm
    public static void fifo(int frames, int[] pages) {
        int pgf = 0, pt = 0;
        int[] frame = new int[frames];

        // Initialize frames
        Arrays.fill(frame, -1);

        System.out.println("\nRunning FIFO Page Replacement:");
        for (int page : pages) {
            boolean flag = true;
            // Check if the page is already in the frame
            for (int j = 0; j < frames; j++) {
                if (page == frame[j]) {
                    flag = false;
                    break;
                }
            }

            // Page fault
            if (flag) {
                frame[pt] = page;
                pt = (pt + 1) % frames; // Move pointer to next position
                pgf++;
            }

            // Display current frames
            System.out.print("Frame: ");
            for (int j = 0; j < frames; j++) {
                System.out.print(frame[j] + " ");
            }
            System.out.println();
        }

        int phit = pages.length - pgf;
        System.out.println("Page faults: " + pgf);
        System.out.println("Page hits: " + phit);
    }

    // LRU Algorithm
    public static void lru(int frames, int[] pages) {
        int pgf = 0;
        int[] frame = new int[frames];
        List<Integer> accessOrder = new ArrayList<>();  // To track the access order

        // Initialize frames
        Arrays.fill(frame, -1);

        System.out.println("\nRunning LRU Page Replacement:");
        for (int page : pages) {
            boolean flag = true;
            // Check if the page is already in the frame
            for (int i = 0; i < frames; i++) {
                if (page == frame[i]) {
                    flag = false;
                    // Move the page to the most recently used position
                    accessOrder.remove(Integer.valueOf(page));
                    accessOrder.add(page);
                    break;
                }
            }

            // Page fault
            if (flag) {
                if (accessOrder.size() == frames) {
                    // If frame is full, remove the least recently used page
                    int lru = accessOrder.remove(0);
                    for (int i = 0; i < frames; i++) {
                        if (frame[i] == lru) {
                            frame[i] = page;
                            break;
                        }
                    }
                } else {
                    // Add page to frame
                    for (int i = 0; i < frames; i++) {
                        if (frame[i] == -1) {
                            frame[i] = page;
                            break;
                        }
                    }
                }
                accessOrder.add(page);
                pgf++;
            }

            // Display current frames
            System.out.print("Frame: ");
            for (int j = 0; j < frames; j++) {
                System.out.print(frame[j] + " ");
            }
            System.out.println();
        }

        int phit = pages.length - pgf;
        System.out.println("Page faults: " + pgf);
        System.out.println("Page hits: " + phit);
    }

    // Main Method
    public static void main(String args[]) throws IOException {
        BufferedReader obj = new BufferedReader(new InputStreamReader(System.in));

        System.out.print("Enter the number of frames: ");
        int frames = Integer.parseInt(obj.readLine());

        System.out.print("Enter the number of pages: ");
        int n = Integer.parseInt(obj.readLine());

        int[] pages = new int[n];
        System.out.println("Enter the page numbers:");
        for (int i = 0; i < n; i++) {
            pages[i] = Integer.parseInt(obj.readLine());
        }

        while (true) {
            System.out.println("\nSelect Page Replacement Algorithm:");
            System.out.println("1. FIFO");
            System.out.println("2. LRU");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int choice = Integer.parseInt(obj.readLine());

            switch (choice) {
                case 1:
                    fifo(frames, pages);
                    break;
                case 2:
                    lru(frames, pages);
                    break;
                case 3:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}
